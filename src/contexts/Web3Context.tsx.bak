import React, { 
  createContext, 
  useContext, 
  useState, 
  useEffect, 
  ReactNode, 
  useCallback,
  useMemo,
  useRef
} from "react";
import { ethers } from 'ethers';
import { Web3Provider as EthersWeb3Provider } from '@ethersproject/providers';
import { useToast } from "@/components/ui/use-toast";
import { CONTRACT_ADDRESSES, CONTRACT_ABI } from "@/config/contracts";
import { TARGET_NETWORK } from "@/config/network";

type ToastVariant = 'default' | 'destructive' | 'success' | 'warning';

interface ToastType {
  title: string;
  description: string;
  variant?: ToastVariant;
}

interface EthereumProvider {
  isMetaMask?: boolean;
  request: (args: { method: string; params?: any[] }) => Promise<any>;
  on: (eventName: string, handler: (...args: any[]) => void) => void;
  removeListener: (eventName: string, handler: (...args: any[]) => void) => void;
  removeAllListeners: (eventName?: string) => void;
  chainId?: string;
  selectedAddress?: string | null;
  isConnected?: () => boolean;
  enable?: () => Promise<string[]>;
  networkVersion?: string;
}

declare global {
  interface Window {
    ethereum?: EthereumProvider;
    officerTempStore?: Officer[];
  }
}

export interface OfficerPermissions {
  canCreate: boolean;
  canApprove: boolean;
  isActive: boolean;
}

export interface Officer {
  id: string;
  name: string;
  username: string;
  email: string;
  isActive: boolean;
  walletAddress: string;
  password?: string;
  permissions: OfficerPermissions;
  createdAt: Date;
}

export interface Tender {
  id: string;
  title: string;
  description: string;
  documentCid: string;
  budget: ethers.BigNumber;
  deadline: ethers.BigNumber;
  creator: string;
  status: number;
  createdAt: ethers.BigNumber;
}

export interface FormattedTender {
  id: string;
  title: string;
  description: string;
  documentCid: string;
  budget: string;
  deadline: Date;
  creator: string;
  status: number;
  createdAt: Date;
}

interface TenderInput {
  title: string;
  description: string;
  department: string;
  budget: string;
  deadline: number;
  criteria: string[];
  documents: { name: string; size: string }[];
}

export interface Web3ContextType {
  account: string | null;
  isConnected: boolean;
  connectWallet: () => Promise<boolean>;
  disconnectWallet: () => Promise<void>;
  isLoading: boolean;
  error: string | null;
  chainId: number | null;
  isCorrectNetwork: boolean;
  switchNetwork: () => Promise<boolean>;
  officerContract: ethers.Contract | null;
  userAuthContract: ethers.Contract | null;
  tenderContract: ethers.Contract | null;
  provider: EthersWeb3Provider | null;
  signer: ethers.Signer | null;
  addOfficer: (username: string, name: string, email: string) => Promise<boolean>;
  updateOfficer: (walletAddress: string, name: string, username: string, email: string) => Promise<boolean>;
  removeOfficer: (walletAddress: string) => Promise<boolean>;
  getOfficer: (walletAddress: string) => Promise<Officer | null>;
  getAllOfficers: () => Promise<Officer[]>;
  createNewTender: (data: TenderInput) => Promise<string>;
  fetchTenders: () => Promise<FormattedTender[]>;
}

interface Web3ProviderProps {
  children: ReactNode;
}

// Local storage keys
const localStorageKeys = {
  officers: 'tender_officers',
  bids: 'tender_bids',
  documents: 'tender_documents',
  connected: 'web3_connected',
  account: 'web3_account',
  chainId: 'web3_chain_id'
};

// Initialize the Web3 context
const Web3Context = createContext<Web3ContextType | undefined>(undefined);

export const useWeb3 = (): Web3ContextType => {
  const context = useContext(Web3Context);
  if (!context) {
    throw new Error('useWeb3 must be used within a Web3Provider');
  }
  return context;
};

export const Web3Provider: React.FC<Web3ProviderProps> = ({ children }) => {
  // State management
  const [account, setAccount] = useState<string | null>(null);
  const [isConnected, setIsConnected] = useState<boolean>(false);
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);
  const [chainId, setChainId] = useState<number | null>(null);
  const [officerContract, setOfficerContract] = useState<ethers.Contract | null>(null);
  const [userAuthContract, setUserAuthContract] = useState<ethers.Contract | null>(null);
  const [tenderContract, setTenderContract] = useState<ethers.Contract | null>(null);
  const [provider, setProvider] = useState<ethers.providers.Web3Provider | null>(null);
  const [signer, setSigner] = useState<ethers.Signer | null>(null);
  
  const { toast } = useToast();
  const isInitialized = useRef(false);

  // Helper state
  const isCorrectNetwork = useMemo(() => {
    return chainId === TARGET_NETWORK.chainId;
  }, [chainId]);

  // Event handlers
  const handleAccountsChanged = useCallback((accounts: string[]) => {
    if (accounts.length === 0) {
      // MetaMask is locked or the user has not connected any accounts
      setAccount(null);
      setIsConnected(false);
    } else {
      setAccount(accounts[0]);
      setIsConnected(true);
    }
  }, []);

  const handleChainChanged = useCallback((chainIdHex: string) => {
    // Convert chainId from hex to number
    const newChainId = parseInt(chainIdHex, 16);
    setChainId(newChainId);
  }, []);

  // Initialize Web3 and contracts
  const initWeb3 = useCallback(async () => {
    if (typeof window.ethereum === 'undefined') {
      setError('Please install MetaMask or another Web3 provider');
      return false;
    }

    try {
      setIsLoading(true);
      
      // Request account access if needed
      const accounts = await window.ethereum?.request?.({
        method: 'eth_requestAccounts',
      });

      if (!accounts || accounts.length === 0) {
        throw new Error('No accounts found');
      }

      const web3Provider = new ethers.providers.Web3Provider(window.ethereum);
      const signer = web3Provider.getSigner();
      const network = await web3Provider.getNetwork();
      
      // Initialize contracts
      const officerContract = new ethers.Contract(
        CONTRACT_ADDRESSES.OFFICER_MANAGEMENT,
        CONTRACT_ABI.OFFICER_MANAGEMENT,
        signer
      );

      const userAuthContract = new ethers.Contract(
        CONTRACT_ADDRESSES.USER_AUTHENTICATION,
        CONTRACT_ABI.USER_AUTHENTICATION,
        signer
      );

      const tenderContract = new ethers.Contract(
        CONTRACT_ADDRESSES.TENDER_MANAGEMENT,
        CONTRACT_ABI.TENDER_MANAGEMENT,
        signer
      );

      setProvider(web3Provider);
      setSigner(signer);
      setOfficerContract(officerContract);
      setUserAuthContract(userAuthContract);
      setTenderContract(tenderContract);
      setChainId(network.chainId);
      setAccount(accounts[0]);
      setIsConnected(true);
      setError(null);

      // Set up event listeners
      window.ethereum?.on?.('accountsChanged', handleAccountsChanged);
      window.ethereum?.on?.('chainChanged', handleChainChanged);

      return true;
    } catch (err) {
      console.error('Error initializing Web3:', err);
      setError(err instanceof Error ? err.message : 'Failed to initialize Web3');
      return false;
    } finally {
      setIsLoading(false);
    }
  }, [handleAccountsChanged, handleChainChanged]);

  // Clean up event listeners on unmount
  useEffect(() => {
    return () => {
      if (window.ethereum?.removeListener) {
        window.ethereum.removeListener('accountsChanged', handleAccountsChanged);
        window.ethereum.removeListener('chainChanged', handleChainChanged);
      }
    };
  }, [handleAccountsChanged, handleChainChanged]);

  // Initialize on mount
  useEffect(() => {
    if (!isInitialized.current) {
      isInitialized.current = true;
      initWeb3();
    }
  }, [initWeb3]);

  // Connect wallet function
  const connectWallet = useCallback(async (): Promise<boolean> => {
    return initWeb3();
  }, [initWeb3]);

  // Disconnect wallet function
  const disconnectWallet = useCallback(async (): Promise<void> => {
    setAccount(null);
    setIsConnected(false);
    setChainId(null);
    setProvider(null);
    setSigner(null);
    setOfficerContract(null);
    setUserAuthContract(null);
    setTenderContract(null);
  }, []);

  // Switch network function
  const switchNetwork = useCallback(async (): Promise<boolean> => {
    try {
      if (!window.ethereum) {
        throw new Error('No Web3 provider found');
      }

      await window.ethereum.request({
        method: 'wallet_switchEthereumChain',
        params: [{ chainId: `0x${TARGET_NETWORK.chainId.toString(16)}` }],
      });
      return true;
    } catch (error) {
      console.error('Error switching network:', error);
      return false;
    }
  }, []);

  // Load contracts function
  const loadContracts = useCallback(async () => {
    if (!provider || !signer) return;

    try {
      const officer = new ethers.Contract(
        CONTRACT_ADDRESSES.OFFICER_MANAGEMENT,
        CONTRACT_ABI.OFFICER_MANAGEMENT,
        signer
      );

      const userAuth = new ethers.Contract(
        CONTRACT_ADDRESSES.USER_AUTHENTICATION,
        CONTRACT_ABI.USER_AUTHENTICATION,
        signer
      );

      const tender = new ethers.Contract(
        CONTRACT_ADDRESSES.TENDER_MANAGEMENT,
        CONTRACT_ABI.TENDER_MANAGEMENT,
        signer
      );

      setOfficerContract(officer);
      setUserAuthContract(userAuth);
      setTenderContract(tender);
    } catch (error) {
      console.error('Error loading contracts:', error);
      setError('Failed to load contracts');
    }
  }, [provider, signer]);

  // Fetch tenders function
  const fetchTenders = useCallback(async (): Promise<FormattedTender[]> => {
    if (!tenderContract) {
      console.warn('[fetchTenders] No tender contract available, returning empty list');
      return [];
    }

    try {
      const tenderCount = await tenderContract.getTenderCount();
      const tenders: FormattedTender[] = [];

      for (let i = 0; i < tenderCount; i++) {
        const tender = await tenderContract.getTender(i);
        tenders.push({
          id: tender.id.toString(),
          title: tender.title,
          description: tender.description,
          documentCid: tender.documentCid,
          budget: ethers.utils.formatEther(tender.budget),
          deadline: new Date(tender.deadline.toNumber() * 1000),
          creator: tender.creator,
          status: tender.status,
          createdAt: new Date(tender.createdAt.toNumber() * 1000),
        });
      }

      return tenders;
    } catch (error) {
      console.error('Error fetching tenders:', error);
      setError('Failed to fetch tenders');
      return [];
    }
  }, [tenderContract]);

  // Create new tender function
  const createNewTender = useCallback(async (data: TenderInput): Promise<string> => {
    if (!tenderContract || !signer) {
      throw new Error('Tender contract not initialized');
    }

    try {
      setIsLoading(true);
      
      // Get the first document's CID or an empty string if no documents
      const documentCid = data.documents.length > 0 ? data.documents[0].name : '';
      
      const tx = await tenderContract.createTender(
        data.title,
        data.description,
        documentCid,
        ethers.utils.parseEther(data.budget),
        Math.floor(data.deadline / 1000), // Convert to seconds
        data.criteria
      );

      const receipt = await tx.wait();
      return receipt.transactionHash;
    } catch (error) {
      console.error('Error creating tender:', error);
      throw error;
    } finally {
      setIsLoading(false);
    }
  }, [tenderContract, signer]);

  // Context value
  const value: Web3ContextType = {
    account,
    isConnected,
    connectWallet,
    disconnectWallet,
    isLoading,
    error,
    chainId,
    isCorrectNetwork,
    switchNetwork,
    officerContract,
    userAuthContract,
    tenderContract,
    provider,
    signer,
    addOfficer: async (username: string, name: string, email: string) => {
      if (!officerContract) throw new Error('Officer contract not initialized');
      const tx = await officerContract.addOfficer(username, name, email);
      await tx.wait();
      return true;
    },
    updateOfficer: async (walletAddress: string, name: string, username: string, email: string) => {
      if (!officerContract) throw new Error('Officer contract not initialized');
      const tx = await officerContract.updateOfficer(walletAddress, name, username, email);
      await tx.wait();
      return true;
    },
    removeOfficer: async (walletAddress: string) => {
      if (!officerContract) throw new Error('Officer contract not initialized');
      const tx = await officerContract.removeOfficer(walletAddress);
      await tx.wait();
      return true;
    },
    getOfficer: async (walletAddress: string) => {
      if (!officerContract) return null;
      return officerContract.getOfficer(walletAddress);
    },
    getAllOfficers: async () => {
      if (!officerContract) return [];
      return officerContract.getAllOfficers();
    },
    createNewTender,
    fetchTenders,
  };

  return (
    <Web3Context.Provider value={value}>
      {children}
    </Web3Context.Provider>
  );
};

export default Web3Context;

// Types
type ToastType = {
  title: string;
  description: string;
  variant?: 'default' | 'destructive' | 'success' | 'warning';
};

interface EthereumProvider {
  isMetaMask?: boolean;
  request: (args: { method: string; params?: any[] }) => Promise<any>;
  on: (eventName: string, handler: (...args: any[]) => void) => void;
  removeListener: (eventName: string, handler: (...args: any[]) => void) => void;
  removeAllListeners: (eventName?: string) => void;
  chainId?: string;
  selectedAddress?: string | null;
  isConnected?: () => boolean;
  enable?: () => Promise<string[]>;
  networkVersion?: string;
}

declare global {
  interface Window {
    ethereum?: EthereumProvider;
    officerTempStore?: Officer[];
  }
}

export interface OfficerPermissions {
  canCreate: boolean;
  canApprove: boolean;
  isActive: boolean;
}

export interface Officer {
  id: string;
  name: string;
  username: string;
  email: string;
  isActive: boolean;
  walletAddress: string;
  password?: string;
  permissions: OfficerPermissions;
  createdAt: Date;
}

export interface Tender {
  id: string;
  title: string;
  description: string;
  documentCid: string;
  budget: ethers.BigNumber;
  deadline: ethers.BigNumber;
  creator: string;
  status: number;
  createdAt: ethers.BigNumber;
}

export interface FormattedTender {
  id: string;
  title: string;
  description: string;
  documentCid: string;
  budget: string;
  deadline: Date;
  creator: string;
  status: number;
  createdAt: Date;
}

interface TenderInput {
  title: string;
  description: string;
  department: string;
  budget: string;
  deadline: number;
  criteria: string[];
  documents: { name: string; size: string }[];
}

export interface Web3ContextType {
  account: string | null;
  isConnected: boolean;
  connectWallet: () => Promise<boolean>;
  disconnectWallet: () => Promise<void>;
  isLoading: boolean;
  error: string | null;
  chainId: number | null;
  isCorrectNetwork: boolean;
  switchNetwork: () => Promise<boolean>;
  officerContract: ethers.Contract | null;
  userAuthContract: ethers.Contract | null;
  tenderContract: ethers.Contract | null;
  provider: EthersWeb3Provider | null;
  signer: ethers.Signer | null;
  addOfficer: (username: string, name: string, email: string) => Promise<boolean>;
  updateOfficer: (walletAddress: string, name: string, username: string, email: string) => Promise<boolean>;
  removeOfficer: (walletAddress: string) => Promise<boolean>;
  getOfficer: (walletAddress: string) => Promise<Officer | null>;
  getAllOfficers: () => Promise<Officer[]>;
  createNewTender: (data: TenderInput) => Promise<string>;
  fetchTenders: () => Promise<FormattedTender[]>;
}

interface Web3ProviderProps {
  children: ReactNode;
}

// Local storage keys
const localStorageKeys = {
  officers: 'tender_officers',
  bids: 'tender_bids',
  documents: 'tender_documents',
  connected: 'web3_connected',
  account: 'web3_account',
  chainId: 'web3_chain_id'
};

// Initialize the Web3 context
const Web3Context = createContext<Web3ContextType | undefined>(undefined);

export const useWeb3 = (): Web3ContextType => {
  const context = useContext(Web3Context);
  if (!context) {
    throw new Error('useWeb3 must be used within a Web3Provider');
  }
  return context;
};

export const Web3Provider: React.FC<Web3ProviderProps> = ({ children }) => {
  // State management
  const [account, setAccount] = useState<string | null>(null);
  const [isConnected, setIsConnected] = useState<boolean>(false);
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);
  const [chainId, setChainId] = useState<number | null>(null);
  const [isCorrectNetwork, setIsCorrectNetwork] = useState<boolean>(false);
  const [officerContract, setOfficerContract] = useState<ethers.Contract | null>(null);
  const [userAuthContract, setUserAuthContract] = useState<ethers.Contract | null>(null);
  const [tenderContract, setTenderContract] = useState<ethers.Contract | null>(null);
  const [provider, setProvider] = useState<ethers.providers.Web3Provider | null>(null);
  const [signer, setSigner] = useState<ethers.Signer | null>(null);
  
  const { toast } = useToast();
  const isInitialized = useRef(false);

  // Helper state
  const isCorrectNetwork = useMemo(() => {
    return chainId === TARGET_NETWORK.chainId;
  }, [chainId]);

  // Event handlers
  const handleAccountsChanged = useCallback((accounts: string[]) => {
    if (accounts.length === 0) {
      // MetaMask is locked or the user has not connected any accounts
      setAccount(null);
      setIsConnected(false);
    } else {
      setAccount(accounts[0]);
      setIsConnected(true);
    }
  }, [setAccount, setIsConnected]);

  const handleChainChanged = useCallback((chainIdHex: string) => {
    // Convert chainId from hex to number
    const newChainId = parseInt(chainIdHex, 16);
    setChainId(newChainId);
    setIsCorrectNetwork(newChainId === TARGET_NETWORK.chainId);
  }, []);

  // Initialize Web3 and contracts
  const initWeb3 = useCallback(async () => {
    if (typeof window.ethereum === 'undefined') {
      setError('Please install MetaMask or another Web3 provider');
      return false;
    }

    try {
      setIsLoading(true);
      
      // Request account access if needed
      const accounts = await window.ethereum?.request?.({
        method: 'eth_requestAccounts',
      });

      if (!accounts || accounts.length === 0) {
        throw new Error('No accounts found');
      }

      const web3Provider = new ethers.providers.Web3Provider(window.ethereum);
      const signer = web3Provider.getSigner();
      const network = await web3Provider.getNetwork();
      
      // Initialize contracts
      const officerContract = new ethers.Contract(
        CONTRACT_ADDRESSES.officer,
        CONTRACT_ABI.officer,
        signer
      );

      const userAuthContract = new ethers.Contract(
        CONTRACT_ADDRESSES.userAuth,
        CONTRACT_ABI.userAuth,
        signer
      );

      const tenderContract = new ethers.Contract(
        CONTRACT_ADDRESSES.tender,
        CONTRACT_ABI.tender,
        signer
      );

      setProvider(web3Provider);
      setSigner(signer);
      setOfficerContract(officerContract);
      setUserAuthContract(userAuthContract);
      setTenderContract(tenderContract);
      setChainId(network.chainId);
      setIsCorrectNetwork(network.chainId === TARGET_NETWORK.chainId);
      setAccount(accounts[0]);
      setIsConnected(true);
      setError(null);

      // Set up event listeners
      window.ethereum?.on?.('accountsChanged', handleAccountsChanged);
      window.ethereum?.on?.('chainChanged', handleChainChanged);

      return true;
    } catch (err) {
      console.error('Error initializing Web3:', err);
      setError(err instanceof Error ? err.message : 'Failed to initialize Web3');
      return false;
    } finally {
      setIsLoading(false);
    }
  }, [handleAccountsChanged, handleChainChanged]);

  // Clean up event listeners on unmount
  useEffect(() => {
    return () => {
      if (window.ethereum?.removeListener) {
        window.ethereum.removeListener('accountsChanged', handleAccountsChanged);
        window.ethereum.removeListener('chainChanged', handleChainChanged);
      }
    };
  }, [handleAccountsChanged, handleChainChanged]);

  // Initialize on mount
  useEffect(() => {
    if (!isInitialized.current) {
      isInitialized.current = true;
      initWeb3();
    }
  }, [initWeb3]);

  // Connect wallet function
  const connectWallet = useCallback(async (): Promise<boolean> => {
    return initWeb3();
  }, [initWeb3]);

  // Disconnect wallet function
  const disconnectWallet = useCallback(async (): Promise<void> => {
    setAccount(null);
    setIsConnected(false);
    setChainId(null);
    setProvider(null);
    setSigner(null);
    setOfficerContract(null);
    setUserAuthContract(null);
    setTenderContract(null);
  }, []);

  // Switch network function
  const switchNetwork = useCallback(async (): Promise<boolean> => {
    try {
      if (!window.ethereum) {
        throw new Error('No Web3 provider found');
      }

      await window.ethereum.request({
        method: 'wallet_switchEthereumChain',
        params: [{ chainId: `0x${TARGET_NETWORK.chainId.toString(16)}` }],
      });
      return true;
    } catch (error) {
      console.error('Error switching network:', error);
      return false;
    }
  }, []);

  // Load contracts function
  const loadContracts = useCallback(async () => {
    if (!provider || !signer) return;

    try {
      const officer = new ethers.Contract(
        CONTRACT_ADDRESSES.officer,
        CONTRACT_ABI.officer,
        signer
      );

      const userAuth = new ethers.Contract(
        CONTRACT_ADDRESSES.userAuth,
        CONTRACT_ABI.userAuth,
        signer
      );

      const tender = new ethers.Contract(
        CONTRACT_ADDRESSES.tender,
        CONTRACT_ABI.tender,
        signer
      );

      setOfficerContract(officer);
      setUserAuthContract(userAuth);
      setTenderContract(tender);
    } catch (error) {
      console.error('Error loading contracts:', error);
      setError('Failed to load contracts');
    }
  }, [provider, signer]);

  // Fetch tenders function
  const fetchTenders = useCallback(async (): Promise<FormattedTender[]> => {
    try {
      if (!tenderContract) {
        console.warn('[fetchTenders] No tender contract available, returning empty list');
        return [];
      }

      const tenderCount = await tenderContract.getTenderCount();
      const tenders: FormattedTender[] = [];

      for (let i = 0; i < tenderCount; i++) {
        const tender = await tenderContract.getTender(i);
        tenders.push({
          id: tender.id.toString(),
          title: tender.title,
          description: tender.description,
          documentCid: tender.documentCid,
          budget: ethers.utils.formatEther(tender.budget),
          deadline: new Date(tender.deadline.toNumber() * 1000),
          creator: tender.creator,
          status: tender.status,
          createdAt: new Date(tender.createdAt.toNumber() * 1000),
        });
      }

      return tenders;
    } catch (error) {
      console.error('Error fetching tenders:', error);
      setError('Failed to fetch tenders');
      return [];
    }
  }, [tenderContract]);

  // Create new tender function
  const createNewTender = useCallback(async (data: TenderInput): Promise<string> => {
    if (!tenderContract || !signer) {
      throw new Error('Tender contract not initialized');
    }

    try {
      setIsLoading(true);
      
      const tx = await tenderContract.createTender(
        data.title,
        data.description,
        data.documentCid,
        ethers.utils.parseEther(data.budget),
        Math.floor(data.deadline / 1000), // Convert to seconds
        data.criteria
      );

      const receipt = await tx.wait();
      return receipt.transactionHash;
    } catch (error) {
      console.error('Error creating tender:', error);
      throw error;
    } finally {
      setIsLoading(false);
    }
  }, [tenderContract, signer]);

  // Context value
  const value: Web3ContextType = {
    account,
    isConnected,
    connectWallet,
    disconnectWallet,
    isLoading,
    error,
    chainId,
    isCorrectNetwork,
    switchNetwork,
    officerContract,
    userAuthContract,
    tenderContract,
    provider,
    signer,
    addOfficer: async (username: string, name: string, email: string) => {
      if (!officerContract) throw new Error('Officer contract not initialized');
      const tx = await officerContract.addOfficer(username, name, email);
      await tx.wait();
      return true;
    },
    updateOfficer: async (walletAddress: string, name: string, username: string, email: string) => {
      if (!officerContract) throw new Error('Officer contract not initialized');
      const tx = await officerContract.updateOfficer(walletAddress, name, username, email);
      await tx.wait();
      return true;
    },
    removeOfficer: async (walletAddress: string) => {
      if (!officerContract) throw new Error('Officer contract not initialized');
      const tx = await officerContract.removeOfficer(walletAddress);
      await tx.wait();
      return true;
    },
    getOfficer: async (walletAddress: string) => {
      if (!officerContract) return null;
      return officerContract.getOfficer(walletAddress);
    },
    getAllOfficers: async () => {
      if (!officerContract) return [];
      return officerContract.getAllOfficers();
    },
    createNewTender,
    fetchTenders,
  };

  return (
    <Web3Context.Provider value={value}>
      {children}
    </Web3Context.Provider>
  );
};
  // State management
  const [account, setAccount] = useState<string | null>(null);
  const [isConnected, setIsConnected] = useState<boolean>(false);
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);
  const [chainId, setChainId] = useState<number | null>(null);
  const [isCorrectNetwork, setIsCorrectNetwork] = useState<boolean>(false);
  const [officerContract, setOfficerContract] = useState<ethers.Contract | null>(null);
  const [userAuthContract, setUserAuthContract] = useState<ethers.Contract | null>(null);
  const [tenderContract, setTenderContract] = useState<ethers.Contract | null>(null);
  const [provider, setProvider] = useState<ethers.providers.Web3Provider | null>(null);
  const [signer, setSigner] = useState<ethers.Signer | null>(null);
  
  const { toast } = useToast();
  const isInitialized = useRef(false);

  // Initialize Web3 and contracts
  const initWeb3 = useCallback(async () => {
    if (typeof window.ethereum === 'undefined') {
      setError('Please install MetaMask or another Web3 provider');
      return false;
    }

    try {
      setIsLoading(true);
      
      // Request account access if needed
      const accounts = await window.ethereum?.request?.({
        method: 'eth_requestAccounts',
      });

      if (!accounts || accounts.length === 0) {
        throw new Error('No accounts found');
      }

      const web3Provider = new ethers.providers.Web3Provider(window.ethereum);
      const signer = web3Provider.getSigner();
      const network = await web3Provider.getNetwork();
      
      // Initialize contracts
      const officerContract = new ethers.Contract(
        CONTRACT_ADDRESSES.officer,
        CONTRACT_ABI.officer,
        signer
      );

      const userAuthContract = new ethers.Contract(
        CONTRACT_ADDRESSES.userAuth,
        CONTRACT_ABI.userAuth,
        signer
      );

      const tenderContract = new ethers.Contract(
        CONTRACT_ADDRESSES.tender,
        CONTRACT_ABI.tender,
        signer
      );

      setProvider(web3Provider);
      setSigner(signer);
      setOfficerContract(officerContract);
      setUserAuthContract(userAuthContract);
      setTenderContract(tenderContract);
      setAccount(accounts[0]);
      setChainId(network.chainId);
      setIsCorrectNetwork(network.chainId === TARGET_NETWORK.chainId);
      setIsConnected(true);
      setError(null);

      // Set up event listeners
      window.ethereum?.on('accountsChanged', handleAccountsChanged);
      window.ethereum?.on('chainChanged', handleChainChanged);

      return true;
    } catch (err) {
      const message = err instanceof Error ? err.message : 'Failed to initialize Web3';
      setError(message);
      console.error('[Web3Context] Error initializing Web3:', err);
      return false;
    } finally {
      setIsLoading(false);
    }
  }, []);

  // Handle account changes
  const handleAccountsChanged = useCallback((accounts: string[]) => {
    if (accounts.length === 0) {
      // MetaMask is locked or the user has disconnected all accounts
      handleDisconnect();
    } else if (accounts[0] !== account) {
      setAccount(accounts[0]);
    }
  }, [account]);

  // Handle chain changes
  const handleChainChanged = useCallback((chainId: string) => {
    const newChainId = parseInt(chainId, 16);
    setChainId(newChainId);
    setIsCorrectNetwork(newChainId === TARGET_NETWORK.chainId);
  }, []);

  // Handle disconnection
  const handleDisconnect = useCallback(() => {
    setAccount(null);
    setIsConnected(false);
    setProvider(null);
    setSigner(null);
    setOfficerContract(null);
    setUserAuthContract(null);
    setTenderContract(null);
    setChainId(null);
    setIsCorrectNetwork(false);
  }, []);

const Web3Context = createContext<Web3ContextType | undefined>(undefined);

export const useWeb3 = (): Web3ContextType => {
  const context = useContext(Web3Context);
  if (!context) {
    throw new Error('useWeb3 must be used within a Web3Provider');
  }
  return context;
};

  bids: 'tender_bids',
  documents: 'tender_documents'
};
    }
  const [chainId, setChainId] = useState<number | null>(null);
  const [provider, setProvider] = useState<EthersWeb3Provider | null>(null);
  const [signer, setSigner] = useState<ethers.Signer | null>(null);
  
  // Contract instances
  const [officerContract, setOfficerContract] = useState<ethers.Contract | null>(null);
  const [userAuthContract, setUserAuthContract] = useState<ethers.Contract | null>(null);
  const [tenderContract, setTenderContract] = useState<ethers.Contract | null>(null);
  
  // Helper state
  const isCorrectNetwork = useMemo(() => {
    return chainId === TARGET_NETWORK.chainId;
  }, [chainId]);

  // Event handlers
  const handleAccountsChanged = useCallback((accounts: string[]) => {
    if (accounts.length === 0) {
      // MetaMask is locked or the user has not connected any accounts
      setAccount(null);
      setIsConnected(false);
    } else {
      setAccount(accounts[0]);
      setIsConnected(true);
    }
  }, [setAccount, setIsConnected]);

  const handleChainChanged = useCallback((chainIdHex: string) => {
    // Convert chainId from hex to number
    const newChainId = parseInt(chainIdHex, 16);
    setChainId(newChainId);
    
    // Reload the page when the chain changes
    window.location.reload();
  }, []);

  // Connect wallet function
  const connectWallet = useCallback(async (): Promise<boolean> => {
    try {
      if (!window.ethereum) {
        throw new Error('Please install MetaMask or another Web3 provider');
      }
      
      setIsLoading(true);
      setError(null);
      
      // Request account access
      const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });
      
      if (accounts.length === 0) {
        throw new Error('No accounts found');
      }
      
      const web3Provider = new ethers.providers.Web3Provider(window.ethereum);
      const signer = web3Provider.getSigner();
      const network = await web3Provider.getNetwork();
      
      setProvider(web3Provider);
      setSigner(signer);
      setAccount(accounts[0]);
      setChainId(network.chainId);
      setIsConnected(true);
      
    try {
      if (!window.ethereum) {
        throw new Error('Please install MetaMask or another Web3 provider');
      }
      
      setIsLoading(true);
      setError(null);
      
      // Request account access
      const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });
      
      if (accounts.length === 0) {
        throw new Error('No accounts found');
      }
      
      const web3Provider = new ethers.providers.Web3Provider(window.ethereum);
      const signer = web3Provider.getSigner();
      const network = await web3Provider.getNetwork();
      
      setProvider(web3Provider);
      setSigner(signer);
      setAccount(accounts[0]);
      setChainId(network.chainId);
      setIsConnected(true);
      
      // Initialize contracts
      await loadContracts(web3Provider, signer);
      
      return true;
  } catch (error: unknown) {
    const errorMessage = error instanceof Error ? error.message : 'Failed to connect wallet';
    console.error('Error connecting wallet:', error);
    setError(errorMessage);
    return false;
  } finally {
    setIsLoading(false);
  }
}, []);

// Disconnect wallet function
const disconnectWallet = useCallback(async (): Promise<void> => {
  try {
    setIsLoading(true);
    setError(null);
    
    // Clear all wallet-related state
    setAccount(null);
    setIsConnected(false);
    setProvider(null);
    setSigner(null);
    setOfficerContract(null);
    setUserAuthContract(null);
    setTenderContract(null);
    setChainId(null);
    
    // Remove event listeners if ethereum is available
    if (window.ethereum) {
      if (typeof (window as any).cleanupWeb3Listeners === 'function') {
        (window as any).cleanupWeb3Listeners();
        delete (window as any).cleanupWeb3Listeners;
      }
    }
    
    toast({
      title: 'Disconnected',
      description: 'Successfully disconnected from wallet',
    });
  } catch (error: any) {
    console.error('Error disconnecting wallet:', error);
    setError(error.message || 'Failed to disconnect wallet');
    toast({
      title: 'Error',
      description: error.message || 'Failed to disconnect wallet',
      variant: 'destructive',
    });
    throw error;
  } finally {
    setIsLoading(false);
  }
}, [toast]);

// Switch network function
const switchNetwork = useCallback(async (): Promise<boolean> => {
  try {
    if (!window.ethereum) {
      throw new Error('No Web3 provider found');
    }
    
    setIsLoading(true);
    setError(null);
    
    try {
      // Try to switch to the target network
      await window.ethereum.request({
        method: 'wallet_switchEthereumChain',
        params: [{ chainId: `0x${TARGET_NETWORK.chainId.toString(16)}` }],
      });
      return true;
    } catch (switchError: any) {
      // This error code indicates that the chain has not been added to MetaMask
      if (switchError.code === 4902) {
        try {
          await window.ethereum.request({
            method: 'wallet_addEthereumChain',
            params: [
              {
                chainId: `0x${TARGET_NETWORK.chainId.toString(16)}`,
                chainName: TARGET_NETWORK.chainName,
                nativeCurrency: TARGET_NETWORK.nativeCurrency,
                rpcUrls: [TARGET_NETWORK.rpcUrl],
                blockExplorerUrls: TARGET_NETWORK.blockExplorerUrls || [],
              },
            ],
          });
          return true;
        } catch (addError) {
          console.error('Error adding network:', addError);
          setError('Failed to add the network to MetaMask');
          return false;
        }
      }
      console.error('Error switching network:', switchError);
      setError(switchError.message || 'Failed to switch network');
      return false;
    }
  } catch (error: any) {
    console.error('Error in switchNetwork:', error);
    setError(error.message || 'Failed to switch network');
    return false;
  } finally {
    setIsLoading(false);
  }
}, [toast, TARGET_NETWORK]);

// Load contracts after provider is ready
const loadContracts = useCallback(async (provider: EthersWeb3Provider, signer: ethers.Signer) => {
  try {
    // Initialize contracts
    const officerContractInstance = new ethers.Contract(
      CONTRACT_ADDRESSES.OFFICER_MANAGEMENT,
      CONTRACT_ABI.OFFICER_MANAGEMENT,
      signer
    );
    setOfficerContract(officerContractInstance);

    const userAuthContractInstance = new ethers.Contract(
      CONTRACT_ADDRESSES.USER_AUTHENTICATION,
      CONTRACT_ABI.USER_AUTHENTICATION,
      signer
    );
    setUserAuthContract(userAuthContractInstance);

    const tenderContractInstance = new ethers.Contract(
      CONTRACT_ADDRESSES.TENDER_MANAGEMENT,
      CONTRACT_ABI.TENDER_MANAGEMENT,
      signer
    );
    setTenderContract(tenderContractInstance);
    
    return {
      officerContract: officerContractInstance,
      userAuthContract: userAuthContractInstance,
      tenderContract: tenderContractInstance
    };
  } catch (error: any) {
    const errorMessage = error instanceof Error ? error.message : 'Failed to load contracts';
    console.error('Error loading contracts:', error);
    setError(errorMessage);
    toast({
      title: 'Error',
      description: errorMessage,
      variant: 'destructive',
    });
    throw error;
  }
}, [toast, CONTRACT_ADDRESSES, CONTRACT_ABI]);

// Function to fetch all tenders
const fetchTenders = useCallback(async (): Promise<FormattedTender[]> => {
  try {
    if (!tenderContract) {
      console.warn("[fetchTenders] No tender contract available, returning empty list");
      return [];
    }
    
    // Get all tender IDs from the contract
    const tenderIds = await tenderContract.getAllTenderIds();
    
    // Fetch each tender's details
    const tendersPromises = tenderIds.map(async (id: string) => {
      const tender = await tenderContract.getTender(id);
      return {
        id,
        title: tender.title,
        description: tender.description,
        documentCid: tender.documentCid,
        budget: ethers.utils.formatEther(tender.budget),
        deadline: new Date(tender.deadline.toNumber() * 1000),
        creator: tender.creator,
        status: tender.status,
        createdAt: new Date(tender.createdAt.toNumber() * 1000),
      };
    });
    
    return await Promise.all(tendersPromises);
  } catch (error) {
    console.error('Error fetching tenders:', error);
    const errorMessage = error instanceof Error ? error.message : 'Failed to fetch tenders';
    setError(errorMessage);
    toast({
      title: 'Error',
      description: errorMessage,
      variant: 'destructive',
    });
    throw error;
  }
}, [tenderContract, toast, setError]);

// ... rest of the code remains the same ...
        }
      }
    };

    initWeb3();

    // Clean up on unmount
    return () => {
      if (typeof (window as any).cleanupWeb3Listeners === 'function') {
        (window as any).cleanupWeb3Listeners();
        delete (window as any).cleanupWeb3Listeners;
      }
    };
  }, []);

  // Disconnect wallet function
  const disconnectWallet = useCallback(async (): Promise<void> => {
    try {
      setIsLoading(true);
      setError(null);
      
      // Clear all wallet-related state
      setAccount(null);
      setIsConnected(false);
      setProvider(null);
      setSigner(null);
      setOfficerContract(null);
      setUserAuthContract(null);
      setTenderContract(null);
      setChainId(null);
      
      // Remove event listeners if ethereum is available
      if (window.ethereum) {
        if (typeof (window as any).cleanupWeb3Listeners === 'function') {
          (window as any).cleanupWeb3Listeners();
          delete (window as any).cleanupWeb3Listeners;
        }
      }
      
      toast({
        title: 'Disconnected',
        description: 'Successfully disconnected from wallet',
      });
    } catch (error: any) {
      console.error('Error disconnecting wallet:', error);
      setError(error.message || 'Failed to disconnect wallet');
      toast({
        title: 'Error',
        description: error.message || 'Failed to disconnect wallet',
        variant: 'destructive',
      });
      throw error;
    } finally {
      setIsLoading(false);
    }
  }, [toast]);

  // Switch network function
  const switchNetwork = useCallback(async (): Promise<boolean> => {
    try {
      if (!window.ethereum) {
        throw new Error('No Web3 provider found');
      }
      
      setIsLoading(true);
      setError(null);
      
      try {
        // Try to switch to the target network
        await window.ethereum.request({
          method: 'wallet_switchEthereumChain',
          params: [{ chainId: `0x${TARGET_NETWORK.chainId.toString(16)}` }],
        });
        return true;
      } catch (switchError: any) {
        // This error code indicates that the chain has not been added to MetaMask
        if (switchError.code === 4902) {
          try {
            await window.ethereum.request({
              method: 'wallet_addEthereumChain',
              params: [
                {
                  chainId: `0x${TARGET_NETWORK.chainId.toString(16)}`,
                  chainName: TARGET_NETWORK.chainName,
                  nativeCurrency: TARGET_NETWORK.nativeCurrency,
                  rpcUrls: TARGET_NETWORK.rpcUrls,
                  blockExplorerUrls: TARGET_NETWORK.blockExplorerUrls,
                },
              ],
            });
            return true;
          } catch (addError) {
            console.error('Error adding network:', addError);
            setError('Failed to add the network to MetaMask');
            return false;
          }
        }
        console.error('Error switching network:', switchError);
        setError(switchError.message || 'Failed to switch network');
        return false;
      }
    } catch (error: any) {
      console.error('Error in switchNetwork:', error);
      setError(error.message || 'Failed to switch network');
      return false;
    } finally {
      setIsLoading(false);
    }
  }, [toast, TARGET_NETWORK]);

  // Load contracts after provider is ready
  const loadContracts = useCallback(async (provider: EthersWeb3Provider, signer: ethers.Signer) => {
    try {
      // Initialize contracts
      const officerContractInstance = new ethers.Contract(
        CONTRACT_ADDRESSES.OFFICER_MANAGEMENT,
        CONTRACT_ABI.OFFICER_MANAGEMENT,
        signer
      );
      setOfficerContract(officerContractInstance);

      const userAuthContractInstance = new ethers.Contract(
        CONTRACT_ADDRESSES.USER_AUTHENTICATION,
        CONTRACT_ABI.USER_AUTHENTICATION,
        signer
      );
      setUserAuthContract(userAuthContractInstance);

      const tenderContractInstance = new ethers.Contract(
        CONTRACT_ADDRESSES.TENDER_MANAGEMENT,
        CONTRACT_ABI.TENDER_MANAGEMENT,
        signer
      );
      setTenderContract(tenderContractInstance);
      
      return {
        officerContract: officerContractInstance,
        userAuthContract: userAuthContractInstance,
        tenderContract: tenderContractInstance
      };
    } catch (error: any) {
      const errorMessage = error instanceof Error ? error.message : 'Failed to load contracts';
      console.error('Error loading contracts:', error);
      setError(errorMessage);
      toast({
        title: 'Error',
        description: errorMessage,
        variant: 'destructive',
      });
      throw error;
    }
  }, [toast, CONTRACT_ADDRESSES, CONTRACT_ABI]);

  // Function to fetch all tenders
  const fetchTenders = useCallback(async (): Promise<FormattedTender[]> => {
    try {
      if (!tenderContract) {
        console.warn("[fetchTenders] No tender contract available, returning empty list");
        return [];
      }
      
      // Get all tender IDs from the contract
      const tenderIds = await tenderContract.getAllTenderIds();
      
      // Fetch each tender's details
      const tendersPromises = tenderIds.map(async (id: string) => {
        const tender = await tenderContract.getTender(id);
        return {
          id,
          title: tender.title,
          description: tender.description,
          documentCid: tender.documentCid,
          budget: ethers.utils.formatEther(tender.budget),
          deadline: new Date(tender.deadline.toNumber() * 1000),
          creator: tender.creator,
          status: tender.status,
          createdAt: new Date(tender.createdAt.toNumber() * 1000),
        };
      });
      
      return await Promise.all(tendersPromises);
    } catch (error) {
      console.error('Error fetching tenders:', error);
      const errorMessage = error instanceof Error ? error.message : 'Failed to fetch tenders';
      setError(errorMessage);
      toast({
        title: 'Error',
        description: errorMessage,
        variant: 'destructive',
      });
      throw error;
    }
  }, [tenderContract, toast, setError]);

  const value: Web3ContextType = {
    account,
    isConnected,
    connectWallet,
    disconnectWallet,
    isLoading,
    error,
        return true;
      } catch (error) {
        console.error('Error updating officer:', error);
        throw error;
      }
    },
    removeOfficer: async (walletAddress: string) => {
      try {
        if (!officerContract) throw new Error('Officer contract not initialized');
        const tx = await officerContract.removeOfficer(walletAddress);
        await tx.wait();
        return true;
      } catch (error) {
        console.error('Error removing officer:', error);
      deadline: number;
      criteria: string[];
      documents: { name: string; size: string }[];
    }) => {
      const loadingToast = toast({
        title: 'Creating Tender',
        description: 'Please wait while we create your tender...',
        duration: 10000,
      });
      
      try {
        setIsLoading(true);
        setError(null);
        
        // Validate input
        if (!data.title || !data.description || !data.budget || !data.deadline || !data.department) {
          throw new Error('All fields are required');
        }
        
        // Ensure wallet is connected
        if (!isConnected || !account) {
          console.log('[createNewTender] Not connected, attempting to connect wallet first');
          const connected = await connectWallet();
          if (!connected) {
            throw new Error('Please connect your wallet to create a tender');
          }
        }
        
        if (!provider || !signer) {
          throw new Error('Blockchain provider not available. Please try again later.');
        }
        
        const { title, description, budget, deadline, department } = data;
        
        // Generate a unique ID for the tender
        const id = `tender-${Date.now()}`;
        
        // Convert budget to wei
        let budgetWei;
        try {
          budgetWei = ethers.utils.parseEther(budget);
        } catch (err) {
          throw new Error('Invalid budget amount. Please enter a valid number.');
        }
        
        // Validate deadline is in the future
        const currentTime = Math.floor(Date.now() / 1000);
        const deadlineSeconds = Math.floor(deadline / 1000);
        
        if (deadline <= Date.now()) {
          throw new Error('Deadline must be in the future');
        }
        
        // Use the existing tender contract if available, otherwise create a new instance
        const contractInstance = tenderContract || new ethers.Contract(
          CONTRACT_ADDRESSES.TENDER_MANAGEMENT,
          CONTRACT_ABI.TENDER_MANAGEMENT,
          signer
        );
        
        console.log('Creating tender with data:', {
          id,
          title,
          description,
          budgetWei: budgetWei.toString(),
          startDate: currentTime,
          endDate: deadlineSeconds,
          category: 'General',
          department,
          location: '',
          documents: []
        });
        
        // Call the contract to create the tender
        const tx = await contractInstance.createTender(
          id,
          title,
          description,
          budgetWei,
          currentTime,          // Start date: current time in seconds
          deadlineSeconds,       // End date: convert from ms to seconds
          'General',            // Category
          department,           // Department
          '',                   // Location
          []                    // Documents (IPFS hashes)
        );
        
        // Wait for the transaction to be mined
        await tx.wait();
        
        // Dismiss loading toast and show success
        toast.dismiss(loadingToast);
        toast({ 
          title: 'Tender Created Successfully', 
          description: `Tender "${title}" has been created successfully.`,
          variant: 'success'
        });
        
        return id;
        
      } catch (error: any) {
        console.error('Error in createNewTender:', error);
        toast.dismiss(loadingToast);
        
        let errorMessage = 'Failed to create tender';
        
        // Handle specific error cases
        if (error.code === 4001) {
          errorMessage = 'Transaction was rejected by user';
        } else if (error.code === -32603) {
          errorMessage = 'Transaction failed. You may not have sufficient funds or gas.';
        } else if (error.message) {
          const revertReason = error.message.match(/reason="([^"]*)"/);
          errorMessage = revertReason && revertReason[1] 
            ? `Transaction reverted: ${revertReason[1]}` 
            : error.message;
        }
        
        setError(errorMessage);
        toast({
          title: 'Error Creating Tender',
          description: errorMessage,
          variant: 'destructive'
        });
        
        throw new Error(errorMessage);
        
      } finally {
        setIsLoading(false);
      }
    },
    fetchTenders: async (): Promise<FormattedTender[]> => {
      try {
        if (!tenderContract) {
          throw new Error('Tender contract not initialized');
        }
        
        // Get all tender IDs from the contract
        const tenderIds = await tenderContract.getAllTenderIds();
        
        // Fetch each tender's details
        const tendersPromises = tenderIds.map(async (id: string) => {
          const tender = await tenderContract.getTender(id);
          return {
            id,
            title: tender.title,
            description: tender.description,
            documentCid: tender.documentCid,
            budget: ethers.utils.formatEther(tender.budget),
            deadline: new Date(tender.deadline.toNumber() * 1000),
            creator: tender.creator,
            status: tender.status,
            createdAt: new Date(tender.createdAt.toNumber() * 1000),
          };
        });
        
        return await Promise.all(tendersPromises);
        
      } catch (error) {
        console.error('Error fetching tenders:', error);
        const errorMessage = error instanceof Error ? error.message : 'Failed to fetch tenders';
        setError(errorMessage);
        toast({
          title: 'Error',
          description: errorMessage,
          variant: 'destructive',
        });
        throw error;
      }
    }
    disconnectWallet,
    isLoading,
    error,
    chainId,
    isCorrectNetwork,
    switchNetwork,
    officerContract,
    userAuthContract,
    tenderContract,
    provider,
    signer,
    addOfficer,
    updateOfficer,
    removeOfficer,
    getOfficer,
    getAllOfficers,
    createNewTender,
    fetchTenders,
  };

  return (
    <Web3Context.Provider value={value}>
      {children}
    </Web3Context.Provider>
  );
};

export { useWeb3, Web3ProviderComponent as Web3Provider };