/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface TenderInterface extends utils.Interface {
  functions: {
    "awardTender(uint256,address)": FunctionFragment;
    "bids(uint256,uint256)": FunctionFragment;
    "completeTender(uint256)": FunctionFragment;
    "createTender(string,string,uint256,uint256)": FunctionFragment;
    "getBid(uint256,uint256)": FunctionFragment;
    "getBidsCount(uint256)": FunctionFragment;
    "getTender(uint256)": FunctionFragment;
    "placeBid(uint256,uint256,string)": FunctionFragment;
    "tenderCount()": FunctionFragment;
    "tenders(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "awardTender"
      | "bids"
      | "completeTender"
      | "createTender"
      | "getBid"
      | "getBidsCount"
      | "getTender"
      | "placeBid"
      | "tenderCount"
      | "tenders"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "awardTender",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "bids",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "completeTender",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createTender",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBid",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBidsCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTender",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "placeBid",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "tenderCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tenders",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "awardTender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bids", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "completeTender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createTender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBidsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTender", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "placeBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tenderCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tenders", data: BytesLike): Result;

  events: {
    "BidPlaced(uint256,address,uint256)": EventFragment;
    "TenderAwarded(uint256,address)": EventFragment;
    "TenderCompleted(uint256)": EventFragment;
    "TenderCreated(uint256,address,string,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BidPlaced"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TenderAwarded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TenderCompleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TenderCreated"): EventFragment;
}

export interface BidPlacedEventObject {
  tenderId: BigNumber;
  bidder: string;
  amount: BigNumber;
}
export type BidPlacedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  BidPlacedEventObject
>;

export type BidPlacedEventFilter = TypedEventFilter<BidPlacedEvent>;

export interface TenderAwardedEventObject {
  tenderId: BigNumber;
  winner: string;
}
export type TenderAwardedEvent = TypedEvent<
  [BigNumber, string],
  TenderAwardedEventObject
>;

export type TenderAwardedEventFilter = TypedEventFilter<TenderAwardedEvent>;

export interface TenderCompletedEventObject {
  tenderId: BigNumber;
}
export type TenderCompletedEvent = TypedEvent<
  [BigNumber],
  TenderCompletedEventObject
>;

export type TenderCompletedEventFilter = TypedEventFilter<TenderCompletedEvent>;

export interface TenderCreatedEventObject {
  tenderId: BigNumber;
  creator: string;
  title: string;
  budget: BigNumber;
}
export type TenderCreatedEvent = TypedEvent<
  [BigNumber, string, string, BigNumber],
  TenderCreatedEventObject
>;

export type TenderCreatedEventFilter = TypedEventFilter<TenderCreatedEvent>;

export interface Tender extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TenderInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    awardTender(
      _tenderId: BigNumberish,
      _winner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    bids(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string] & {
        bidder: string;
        amount: BigNumber;
        proposal: string;
      }
    >;

    completeTender(
      _tenderId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    createTender(
      _title: string,
      _description: string,
      _budget: BigNumberish,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getBid(
      _tenderId: BigNumberish,
      _bidIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string] & {
        bidder: string;
        amount: BigNumber;
        proposal: string;
      }
    >;

    getBidsCount(
      _tenderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTender(
      _tenderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        boolean,
        string,
        boolean
      ] & {
        id: BigNumber;
        creator: string;
        title: string;
        description: string;
        budget: BigNumber;
        deadline: BigNumber;
        isActive: boolean;
        winner: string;
        completed: boolean;
      }
    >;

    placeBid(
      _tenderId: BigNumberish,
      _amount: BigNumberish,
      _proposal: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    tenderCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    tenders(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        boolean,
        string,
        boolean
      ] & {
        id: BigNumber;
        creator: string;
        title: string;
        description: string;
        budget: BigNumber;
        deadline: BigNumber;
        isActive: boolean;
        winner: string;
        completed: boolean;
      }
    >;
  };

  awardTender(
    _tenderId: BigNumberish,
    _winner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  bids(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, string] & {
      bidder: string;
      amount: BigNumber;
      proposal: string;
    }
  >;

  completeTender(
    _tenderId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  createTender(
    _title: string,
    _description: string,
    _budget: BigNumberish,
    _deadline: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getBid(
    _tenderId: BigNumberish,
    _bidIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, string] & {
      bidder: string;
      amount: BigNumber;
      proposal: string;
    }
  >;

  getBidsCount(
    _tenderId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTender(
    _tenderId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      boolean,
      string,
      boolean
    ] & {
      id: BigNumber;
      creator: string;
      title: string;
      description: string;
      budget: BigNumber;
      deadline: BigNumber;
      isActive: boolean;
      winner: string;
      completed: boolean;
    }
  >;

  placeBid(
    _tenderId: BigNumberish,
    _amount: BigNumberish,
    _proposal: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  tenderCount(overrides?: CallOverrides): Promise<BigNumber>;

  tenders(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      boolean,
      string,
      boolean
    ] & {
      id: BigNumber;
      creator: string;
      title: string;
      description: string;
      budget: BigNumber;
      deadline: BigNumber;
      isActive: boolean;
      winner: string;
      completed: boolean;
    }
  >;

  callStatic: {
    awardTender(
      _tenderId: BigNumberish,
      _winner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    bids(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string] & {
        bidder: string;
        amount: BigNumber;
        proposal: string;
      }
    >;

    completeTender(
      _tenderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createTender(
      _title: string,
      _description: string,
      _budget: BigNumberish,
      _deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBid(
      _tenderId: BigNumberish,
      _bidIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string] & {
        bidder: string;
        amount: BigNumber;
        proposal: string;
      }
    >;

    getBidsCount(
      _tenderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTender(
      _tenderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        boolean,
        string,
        boolean
      ] & {
        id: BigNumber;
        creator: string;
        title: string;
        description: string;
        budget: BigNumber;
        deadline: BigNumber;
        isActive: boolean;
        winner: string;
        completed: boolean;
      }
    >;

    placeBid(
      _tenderId: BigNumberish,
      _amount: BigNumberish,
      _proposal: string,
      overrides?: CallOverrides
    ): Promise<void>;

    tenderCount(overrides?: CallOverrides): Promise<BigNumber>;

    tenders(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        boolean,
        string,
        boolean
      ] & {
        id: BigNumber;
        creator: string;
        title: string;
        description: string;
        budget: BigNumber;
        deadline: BigNumber;
        isActive: boolean;
        winner: string;
        completed: boolean;
      }
    >;
  };

  filters: {
    "BidPlaced(uint256,address,uint256)"(
      tenderId?: BigNumberish | null,
      bidder?: string | null,
      amount?: null
    ): BidPlacedEventFilter;
    BidPlaced(
      tenderId?: BigNumberish | null,
      bidder?: string | null,
      amount?: null
    ): BidPlacedEventFilter;

    "TenderAwarded(uint256,address)"(
      tenderId?: BigNumberish | null,
      winner?: string | null
    ): TenderAwardedEventFilter;
    TenderAwarded(
      tenderId?: BigNumberish | null,
      winner?: string | null
    ): TenderAwardedEventFilter;

    "TenderCompleted(uint256)"(
      tenderId?: BigNumberish | null
    ): TenderCompletedEventFilter;
    TenderCompleted(tenderId?: BigNumberish | null): TenderCompletedEventFilter;

    "TenderCreated(uint256,address,string,uint256)"(
      tenderId?: BigNumberish | null,
      creator?: string | null,
      title?: null,
      budget?: null
    ): TenderCreatedEventFilter;
    TenderCreated(
      tenderId?: BigNumberish | null,
      creator?: string | null,
      title?: null,
      budget?: null
    ): TenderCreatedEventFilter;
  };

  estimateGas: {
    awardTender(
      _tenderId: BigNumberish,
      _winner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    bids(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    completeTender(
      _tenderId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    createTender(
      _title: string,
      _description: string,
      _budget: BigNumberish,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getBid(
      _tenderId: BigNumberish,
      _bidIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBidsCount(
      _tenderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTender(
      _tenderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    placeBid(
      _tenderId: BigNumberish,
      _amount: BigNumberish,
      _proposal: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    tenderCount(overrides?: CallOverrides): Promise<BigNumber>;

    tenders(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    awardTender(
      _tenderId: BigNumberish,
      _winner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    bids(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    completeTender(
      _tenderId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    createTender(
      _title: string,
      _description: string,
      _budget: BigNumberish,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getBid(
      _tenderId: BigNumberish,
      _bidIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBidsCount(
      _tenderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTender(
      _tenderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    placeBid(
      _tenderId: BigNumberish,
      _amount: BigNumberish,
      _proposal: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    tenderCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tenders(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
