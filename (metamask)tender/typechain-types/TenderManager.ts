/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface TenderManagerInterface extends utils.Interface {
  functions: {
    "addAdmin(address)": FunctionFragment;
    "approveVendor(uint256,address)": FunctionFragment;
    "bidStatuses(uint256,uint256)": FunctionFragment;
    "bulkApproveVendors(uint256,address[])": FunctionFragment;
    "cancelTender(uint256)": FunctionFragment;
    "closeTender(uint256,uint256)": FunctionFragment;
    "createTender(string,string,uint256,uint256,bytes32,bool,address[])": FunctionFragment;
    "deleteTender(uint256)": FunctionFragment;
    "getAllTenders(uint256,uint256)": FunctionFragment;
    "getApprovedVendors(uint256)": FunctionFragment;
    "getBidStatus(uint256,uint256)": FunctionFragment;
    "getTender(uint256)": FunctionFragment;
    "getTenderBids(uint256,uint256,uint256)": FunctionFragment;
    "getTenderBidsCount(uint256)": FunctionFragment;
    "getTenderCount()": FunctionFragment;
    "removeAdmin(address)": FunctionFragment;
    "revokeVendor(uint256,address)": FunctionFragment;
    "revokeVendor(address)": FunctionFragment;
    "submitBid(uint256,uint256,string)": FunctionFragment;
    "verifyVendor(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addAdmin"
      | "approveVendor"
      | "bidStatuses"
      | "bulkApproveVendors"
      | "cancelTender"
      | "closeTender"
      | "createTender"
      | "deleteTender"
      | "getAllTenders"
      | "getApprovedVendors"
      | "getBidStatus"
      | "getTender"
      | "getTenderBids"
      | "getTenderBidsCount"
      | "getTenderCount"
      | "removeAdmin"
      | "revokeVendor(uint256,address)"
      | "revokeVendor(address)"
      | "submitBid"
      | "verifyVendor"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "addAdmin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "approveVendor",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "bidStatuses",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "bulkApproveVendors",
    values: [BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelTender",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "closeTender",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createTender",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BytesLike,
      boolean,
      string[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteTender",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllTenders",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getApprovedVendors",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBidStatus",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTender",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTenderBids",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTenderBidsCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTenderCount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "removeAdmin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "revokeVendor(uint256,address)",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeVendor(address)",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "submitBid",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyVendor",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "addAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approveVendor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bidStatuses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bulkApproveVendors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelTender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closeTender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createTender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteTender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllTenders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApprovedVendors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBidStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTender", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTenderBids",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTenderBidsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTenderCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeVendor(uint256,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeVendor(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "submitBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifyVendor",
    data: BytesLike
  ): Result;

  events: {
    "AdminAdded(address,address)": EventFragment;
    "AdminRemoved(address,address)": EventFragment;
    "BidStatusUpdated(uint256,uint256,uint8)": EventFragment;
    "BidSubmitted(uint256,uint256,address,uint256,string)": EventFragment;
    "TenderCancelled(uint256,address)": EventFragment;
    "TenderClosed(uint256,uint256,address)": EventFragment;
    "TenderCreated(uint256,address,string,uint256,bool,bytes32)": EventFragment;
    "TenderDeleted(uint256,address)": EventFragment;
    "VendorApproved(uint256,address,address)": EventFragment;
    "VendorRevoked(uint256,address,address)": EventFragment;
    "VendorVerified(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AdminRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BidStatusUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BidSubmitted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TenderCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TenderClosed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TenderCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TenderDeleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VendorApproved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VendorRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VendorVerified"): EventFragment;
}

export interface AdminAddedEventObject {
  admin: string;
  addedBy: string;
}
export type AdminAddedEvent = TypedEvent<
  [string, string],
  AdminAddedEventObject
>;

export type AdminAddedEventFilter = TypedEventFilter<AdminAddedEvent>;

export interface AdminRemovedEventObject {
  admin: string;
  removedBy: string;
}
export type AdminRemovedEvent = TypedEvent<
  [string, string],
  AdminRemovedEventObject
>;

export type AdminRemovedEventFilter = TypedEventFilter<AdminRemovedEvent>;

export interface BidStatusUpdatedEventObject {
  tenderId: BigNumber;
  bidId: BigNumber;
  status: number;
}
export type BidStatusUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber, number],
  BidStatusUpdatedEventObject
>;

export type BidStatusUpdatedEventFilter =
  TypedEventFilter<BidStatusUpdatedEvent>;

export interface BidSubmittedEventObject {
  tenderId: BigNumber;
  bidId: BigNumber;
  bidder: string;
  amount: BigNumber;
  proposal: string;
}
export type BidSubmittedEvent = TypedEvent<
  [BigNumber, BigNumber, string, BigNumber, string],
  BidSubmittedEventObject
>;

export type BidSubmittedEventFilter = TypedEventFilter<BidSubmittedEvent>;

export interface TenderCancelledEventObject {
  tenderId: BigNumber;
  owner: string;
}
export type TenderCancelledEvent = TypedEvent<
  [BigNumber, string],
  TenderCancelledEventObject
>;

export type TenderCancelledEventFilter = TypedEventFilter<TenderCancelledEvent>;

export interface TenderClosedEventObject {
  tenderId: BigNumber;
  winningBidId: BigNumber;
  winner: string;
}
export type TenderClosedEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  TenderClosedEventObject
>;

export type TenderClosedEventFilter = TypedEventFilter<TenderClosedEvent>;

export interface TenderCreatedEventObject {
  tenderId: BigNumber;
  owner: string;
  title: string;
  deadline: BigNumber;
  isPrivate: boolean;
  documentHash: string;
}
export type TenderCreatedEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, boolean, string],
  TenderCreatedEventObject
>;

export type TenderCreatedEventFilter = TypedEventFilter<TenderCreatedEvent>;

export interface TenderDeletedEventObject {
  tenderId: BigNumber;
  admin: string;
}
export type TenderDeletedEvent = TypedEvent<
  [BigNumber, string],
  TenderDeletedEventObject
>;

export type TenderDeletedEventFilter = TypedEventFilter<TenderDeletedEvent>;

export interface VendorApprovedEventObject {
  tenderId: BigNumber;
  vendor: string;
  approvedBy: string;
}
export type VendorApprovedEvent = TypedEvent<
  [BigNumber, string, string],
  VendorApprovedEventObject
>;

export type VendorApprovedEventFilter = TypedEventFilter<VendorApprovedEvent>;

export interface VendorRevokedEventObject {
  tenderId: BigNumber;
  vendor: string;
  revokedBy: string;
}
export type VendorRevokedEvent = TypedEvent<
  [BigNumber, string, string],
  VendorRevokedEventObject
>;

export type VendorRevokedEventFilter = TypedEventFilter<VendorRevokedEvent>;

export interface VendorVerifiedEventObject {
  vendor: string;
  timestamp: BigNumber;
}
export type VendorVerifiedEvent = TypedEvent<
  [string, BigNumber],
  VendorVerifiedEventObject
>;

export type VendorVerifiedEventFilter = TypedEventFilter<VendorVerifiedEvent>;

export interface TenderManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TenderManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addAdmin(
      _admin: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    approveVendor(
      _tenderId: BigNumberish,
      _vendor: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    bidStatuses(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    bulkApproveVendors(
      _tenderId: BigNumberish,
      _vendors: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    cancelTender(
      _tenderId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    closeTender(
      _tenderId: BigNumberish,
      _winningBidId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    createTender(
      _title: string,
      _description: string,
      _deadline: BigNumberish,
      _minBid: BigNumberish,
      _documentHash: BytesLike,
      _isPrivate: boolean,
      _allowedBidders: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    deleteTender(
      _tenderId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getAllTenders(
      _offset: BigNumberish,
      _limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber[],
        string[],
        string[],
        number[],
        BigNumber[],
        BigNumber[],
        BigNumber[]
      ] & {
        ids: BigNumber[];
        titles: string[];
        owners: string[];
        statuses: number[];
        deadlines: BigNumber[];
        minBids: BigNumber[];
        totalBids: BigNumber[];
      }
    >;

    getApprovedVendors(
      _tenderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getBidStatus(
      _tenderId: BigNumberish,
      _bidId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getTender(
      _tenderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        string,
        number,
        BigNumber,
        BigNumber,
        string,
        boolean,
        BigNumber
      ] & {
        title: string;
        description: string;
        deadline: BigNumber;
        minBid: BigNumber;
        ownerAddress: string;
        status: number;
        winningBidId: BigNumber;
        createdAt: BigNumber;
        documentHash: string;
        isPrivate: boolean;
        totalBids: BigNumber;
      }
    >;

    getTenderBids(
      _tenderId: BigNumberish,
      _offset: BigNumberish,
      _limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], string[], BigNumber[], BigNumber[], string[]] & {
        ids: BigNumber[];
        bidders: string[];
        amounts: BigNumber[];
        timestamps: BigNumber[];
        proposals: string[];
      }
    >;

    getTenderBidsCount(
      _tenderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTenderCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    removeAdmin(
      _admin: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "revokeVendor(uint256,address)"(
      _tenderId: BigNumberish,
      _vendor: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "revokeVendor(address)"(
      _vendor: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    submitBid(
      _tenderId: BigNumberish,
      _amount: BigNumberish,
      _proposal: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    verifyVendor(
      _vendor: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  addAdmin(
    _admin: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  approveVendor(
    _tenderId: BigNumberish,
    _vendor: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  bidStatuses(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  bulkApproveVendors(
    _tenderId: BigNumberish,
    _vendors: string[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  cancelTender(
    _tenderId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  closeTender(
    _tenderId: BigNumberish,
    _winningBidId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  createTender(
    _title: string,
    _description: string,
    _deadline: BigNumberish,
    _minBid: BigNumberish,
    _documentHash: BytesLike,
    _isPrivate: boolean,
    _allowedBidders: string[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  deleteTender(
    _tenderId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getAllTenders(
    _offset: BigNumberish,
    _limit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber[],
      string[],
      string[],
      number[],
      BigNumber[],
      BigNumber[],
      BigNumber[]
    ] & {
      ids: BigNumber[];
      titles: string[];
      owners: string[];
      statuses: number[];
      deadlines: BigNumber[];
      minBids: BigNumber[];
      totalBids: BigNumber[];
    }
  >;

  getApprovedVendors(
    _tenderId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getBidStatus(
    _tenderId: BigNumberish,
    _bidId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  getTender(
    _tenderId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      BigNumber,
      BigNumber,
      string,
      number,
      BigNumber,
      BigNumber,
      string,
      boolean,
      BigNumber
    ] & {
      title: string;
      description: string;
      deadline: BigNumber;
      minBid: BigNumber;
      ownerAddress: string;
      status: number;
      winningBidId: BigNumber;
      createdAt: BigNumber;
      documentHash: string;
      isPrivate: boolean;
      totalBids: BigNumber;
    }
  >;

  getTenderBids(
    _tenderId: BigNumberish,
    _offset: BigNumberish,
    _limit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber[], string[], BigNumber[], BigNumber[], string[]] & {
      ids: BigNumber[];
      bidders: string[];
      amounts: BigNumber[];
      timestamps: BigNumber[];
      proposals: string[];
    }
  >;

  getTenderBidsCount(
    _tenderId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTenderCount(overrides?: CallOverrides): Promise<BigNumber>;

  removeAdmin(
    _admin: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "revokeVendor(uint256,address)"(
    _tenderId: BigNumberish,
    _vendor: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "revokeVendor(address)"(
    _vendor: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  submitBid(
    _tenderId: BigNumberish,
    _amount: BigNumberish,
    _proposal: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  verifyVendor(
    _vendor: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    addAdmin(_admin: string, overrides?: CallOverrides): Promise<void>;

    approveVendor(
      _tenderId: BigNumberish,
      _vendor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    bidStatuses(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    bulkApproveVendors(
      _tenderId: BigNumberish,
      _vendors: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    cancelTender(
      _tenderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    closeTender(
      _tenderId: BigNumberish,
      _winningBidId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createTender(
      _title: string,
      _description: string,
      _deadline: BigNumberish,
      _minBid: BigNumberish,
      _documentHash: BytesLike,
      _isPrivate: boolean,
      _allowedBidders: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deleteTender(
      _tenderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getAllTenders(
      _offset: BigNumberish,
      _limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber[],
        string[],
        string[],
        number[],
        BigNumber[],
        BigNumber[],
        BigNumber[]
      ] & {
        ids: BigNumber[];
        titles: string[];
        owners: string[];
        statuses: number[];
        deadlines: BigNumber[];
        minBids: BigNumber[];
        totalBids: BigNumber[];
      }
    >;

    getApprovedVendors(
      _tenderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getBidStatus(
      _tenderId: BigNumberish,
      _bidId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    getTender(
      _tenderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        string,
        number,
        BigNumber,
        BigNumber,
        string,
        boolean,
        BigNumber
      ] & {
        title: string;
        description: string;
        deadline: BigNumber;
        minBid: BigNumber;
        ownerAddress: string;
        status: number;
        winningBidId: BigNumber;
        createdAt: BigNumber;
        documentHash: string;
        isPrivate: boolean;
        totalBids: BigNumber;
      }
    >;

    getTenderBids(
      _tenderId: BigNumberish,
      _offset: BigNumberish,
      _limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], string[], BigNumber[], BigNumber[], string[]] & {
        ids: BigNumber[];
        bidders: string[];
        amounts: BigNumber[];
        timestamps: BigNumber[];
        proposals: string[];
      }
    >;

    getTenderBidsCount(
      _tenderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTenderCount(overrides?: CallOverrides): Promise<BigNumber>;

    removeAdmin(_admin: string, overrides?: CallOverrides): Promise<void>;

    "revokeVendor(uint256,address)"(
      _tenderId: BigNumberish,
      _vendor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "revokeVendor(address)"(
      _vendor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    submitBid(
      _tenderId: BigNumberish,
      _amount: BigNumberish,
      _proposal: string,
      overrides?: CallOverrides
    ): Promise<void>;

    verifyVendor(_vendor: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "AdminAdded(address,address)"(
      admin?: string | null,
      addedBy?: string | null
    ): AdminAddedEventFilter;
    AdminAdded(
      admin?: string | null,
      addedBy?: string | null
    ): AdminAddedEventFilter;

    "AdminRemoved(address,address)"(
      admin?: string | null,
      removedBy?: string | null
    ): AdminRemovedEventFilter;
    AdminRemoved(
      admin?: string | null,
      removedBy?: string | null
    ): AdminRemovedEventFilter;

    "BidStatusUpdated(uint256,uint256,uint8)"(
      tenderId?: BigNumberish | null,
      bidId?: BigNumberish | null,
      status?: null
    ): BidStatusUpdatedEventFilter;
    BidStatusUpdated(
      tenderId?: BigNumberish | null,
      bidId?: BigNumberish | null,
      status?: null
    ): BidStatusUpdatedEventFilter;

    "BidSubmitted(uint256,uint256,address,uint256,string)"(
      tenderId?: BigNumberish | null,
      bidId?: BigNumberish | null,
      bidder?: string | null,
      amount?: null,
      proposal?: null
    ): BidSubmittedEventFilter;
    BidSubmitted(
      tenderId?: BigNumberish | null,
      bidId?: BigNumberish | null,
      bidder?: string | null,
      amount?: null,
      proposal?: null
    ): BidSubmittedEventFilter;

    "TenderCancelled(uint256,address)"(
      tenderId?: BigNumberish | null,
      owner?: string | null
    ): TenderCancelledEventFilter;
    TenderCancelled(
      tenderId?: BigNumberish | null,
      owner?: string | null
    ): TenderCancelledEventFilter;

    "TenderClosed(uint256,uint256,address)"(
      tenderId?: BigNumberish | null,
      winningBidId?: BigNumberish | null,
      winner?: string | null
    ): TenderClosedEventFilter;
    TenderClosed(
      tenderId?: BigNumberish | null,
      winningBidId?: BigNumberish | null,
      winner?: string | null
    ): TenderClosedEventFilter;

    "TenderCreated(uint256,address,string,uint256,bool,bytes32)"(
      tenderId?: BigNumberish | null,
      owner?: string | null,
      title?: null,
      deadline?: null,
      isPrivate?: null,
      documentHash?: null
    ): TenderCreatedEventFilter;
    TenderCreated(
      tenderId?: BigNumberish | null,
      owner?: string | null,
      title?: null,
      deadline?: null,
      isPrivate?: null,
      documentHash?: null
    ): TenderCreatedEventFilter;

    "TenderDeleted(uint256,address)"(
      tenderId?: BigNumberish | null,
      admin?: string | null
    ): TenderDeletedEventFilter;
    TenderDeleted(
      tenderId?: BigNumberish | null,
      admin?: string | null
    ): TenderDeletedEventFilter;

    "VendorApproved(uint256,address,address)"(
      tenderId?: BigNumberish | null,
      vendor?: string | null,
      approvedBy?: string | null
    ): VendorApprovedEventFilter;
    VendorApproved(
      tenderId?: BigNumberish | null,
      vendor?: string | null,
      approvedBy?: string | null
    ): VendorApprovedEventFilter;

    "VendorRevoked(uint256,address,address)"(
      tenderId?: BigNumberish | null,
      vendor?: string | null,
      revokedBy?: string | null
    ): VendorRevokedEventFilter;
    VendorRevoked(
      tenderId?: BigNumberish | null,
      vendor?: string | null,
      revokedBy?: string | null
    ): VendorRevokedEventFilter;

    "VendorVerified(address,uint256)"(
      vendor?: string | null,
      timestamp?: null
    ): VendorVerifiedEventFilter;
    VendorVerified(
      vendor?: string | null,
      timestamp?: null
    ): VendorVerifiedEventFilter;
  };

  estimateGas: {
    addAdmin(
      _admin: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    approveVendor(
      _tenderId: BigNumberish,
      _vendor: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    bidStatuses(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bulkApproveVendors(
      _tenderId: BigNumberish,
      _vendors: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    cancelTender(
      _tenderId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    closeTender(
      _tenderId: BigNumberish,
      _winningBidId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    createTender(
      _title: string,
      _description: string,
      _deadline: BigNumberish,
      _minBid: BigNumberish,
      _documentHash: BytesLike,
      _isPrivate: boolean,
      _allowedBidders: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    deleteTender(
      _tenderId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getAllTenders(
      _offset: BigNumberish,
      _limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getApprovedVendors(
      _tenderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBidStatus(
      _tenderId: BigNumberish,
      _bidId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTender(
      _tenderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTenderBids(
      _tenderId: BigNumberish,
      _offset: BigNumberish,
      _limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTenderBidsCount(
      _tenderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTenderCount(overrides?: CallOverrides): Promise<BigNumber>;

    removeAdmin(
      _admin: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "revokeVendor(uint256,address)"(
      _tenderId: BigNumberish,
      _vendor: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "revokeVendor(address)"(
      _vendor: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    submitBid(
      _tenderId: BigNumberish,
      _amount: BigNumberish,
      _proposal: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    verifyVendor(
      _vendor: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addAdmin(
      _admin: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    approveVendor(
      _tenderId: BigNumberish,
      _vendor: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    bidStatuses(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bulkApproveVendors(
      _tenderId: BigNumberish,
      _vendors: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    cancelTender(
      _tenderId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    closeTender(
      _tenderId: BigNumberish,
      _winningBidId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    createTender(
      _title: string,
      _description: string,
      _deadline: BigNumberish,
      _minBid: BigNumberish,
      _documentHash: BytesLike,
      _isPrivate: boolean,
      _allowedBidders: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    deleteTender(
      _tenderId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getAllTenders(
      _offset: BigNumberish,
      _limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getApprovedVendors(
      _tenderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBidStatus(
      _tenderId: BigNumberish,
      _bidId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTender(
      _tenderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTenderBids(
      _tenderId: BigNumberish,
      _offset: BigNumberish,
      _limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTenderBidsCount(
      _tenderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTenderCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeAdmin(
      _admin: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "revokeVendor(uint256,address)"(
      _tenderId: BigNumberish,
      _vendor: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "revokeVendor(address)"(
      _vendor: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    submitBid(
      _tenderId: BigNumberish,
      _amount: BigNumberish,
      _proposal: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    verifyVendor(
      _vendor: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
